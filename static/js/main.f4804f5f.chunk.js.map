{"version":3,"sources":["TransReducer.jsx","TransContext.jsx","Child.jsx","App.js","serviceWorker.js","index.js"],"names":["TransactionReducer","state","action","type","transactions","payload","expense","amount","income","filter","transaction","index","id","TransactionContext","createContext","TransactionProvider","children","useReducer","dispatch","Provider","value","addTransaction","transObj","description","removeTransaction","Child","useContext","t","console","log","useState","newDesc","setDesc","newAmount","setAmount","className","map","transVal","key","onClick","onSubmit","event","preventDefault","Number","alert","netTrans","onChange","target","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4804f5f.chunk.js","sourcesContent":["\r\n\r\nconst TransactionReducer = ((state, action) => {\r\n    switch(action.type){\r\n        case \"ADD_TRANSACTION\" : {\r\n           \r\n            return {\r\n                ...state,\r\n                transactions:[ action.payload, ...state.transactions],\r\n                expense: action.payload.amount < 0 ? state.expense + action.payload.amount : state.expense,\r\n                income: action.payload.amount > 0 ? state.income + action.payload.amount:state.income,\r\n            }\r\n        }\r\n        case \"REMOVE_TRANSACTION\":\r\n            \r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter((transaction,index) => index!== action.payload.id),\r\n                expense: action.payload.amount < 0 ? state.expense - action.payload.amount:state.expense,\r\n                income: action.payload.amount > 0 ? state.income - action.payload.amount:state.income,\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n})\r\n\r\nexport default TransactionReducer;","import React, { createContext, useReducer } from 'react';\r\nimport TransactionReducer from './TransReducer'\r\n\r\nconst initialTransactions = [\r\n    \r\n]\r\n\r\n\r\nexport const TransactionContext = createContext();\r\n\r\nexport const TransactionProvider = ({children}) => { \r\nconst initialState = {\r\n    transactions: [],\r\n    income:0,\r\n    expense:0,\r\n}\r\n    let [state, dispatch] = useReducer(TransactionReducer,initialState );\r\n\r\n    function addTransaction(transObj){\r\n        dispatch({\r\n            type: \"ADD_TRANSACTION\",\r\n            payload: { \r\n                amount: transObj.amount, \r\n                description: transObj.description \r\n            },\r\n        });\r\n    }\r\n\r\n\r\n    function removeTransaction(transaction){\r\n        dispatch({type:\"REMOVE_TRANSACTION\",payload:transaction}); \r\n    }\r\n\r\n\r\n    return(\r\n        <TransactionContext.Provider value= { \r\n            {\r\n                transactions: state.transactions,\r\n                income:state.income,\r\n                expense:state.expense,\r\n                addTransaction,\r\n                removeTransaction\r\n            }\r\n        }>\r\n            {children}\r\n        </TransactionContext.Provider>\r\n    )\r\n}","import React, { useContext, useState } from 'react';\r\nimport {TransactionContext} from './TransContext';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\nconst Child = () => {\r\n\r\n   let transactions = useContext(TransactionContext);\r\n   let {addTransaction, removeTransaction, transactions : t,expense,income} = transactions; \r\n   console.log(addTransaction)\r\n\r\n   let [newDesc, setDesc] = useState(\"\");\r\n   let [newAmount, setAmount] = useState(\"\");\r\n\r\n   const handleAddition = (event) => {\r\n        event.preventDefault();\r\n        if (Number(newAmount) === 0){\r\n            alert(\"Please enter correct amount\")\r\n            return false\r\n        }\r\n\r\n      const netTrans =\r\n          { \r\n            amount: Number(newAmount),\r\n            description: newDesc\r\n        }\r\n\r\n        addTransaction(netTrans) \r\n\r\n        setDesc(\"\");\r\n        setAmount(\"\");\r\n        \r\n        \r\n   } \r\n\r\n   \r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h1 className='text_center'> Exp.Tracker by M.Farooq </h1>\r\n               \r\n                <h3 className=\"balance\"> Your Balance <br /> ${income + expense}.00 </h3>\r\n\r\n                <div className='expense_container'>\r\n                   \r\n                    <h3 className='income'>Income <br /> ${income}.00 </h3>\r\n                    \r\n                 \r\n                    <h3 className='expense'>Expense <br /> ${expense}.00 </h3>\r\n                </div>\r\n                <h3 className='h3'> Transaction History </h3>\r\n                <hr />\r\n\r\n                <ul className='transaction_list'>\r\n\r\n                    {t.map((transVal, index) => {\r\n                        return (\r\n                            <li key= {index} id='list'>\r\n                                <span onClick={()=> removeTransaction({...transVal,id:index})} > <HighlightOffIcon /> </span>\r\n                                <span> {transVal.description} </span>\r\n                                <span> ${transVal.amount} </span>\r\n                                \r\n                            </li>\r\n                        )\r\n                    })}\r\n                  \r\n                </ul>\r\n\r\n                <h3 className='h3'> Add new Transaction</h3>\r\n                <hr />\r\n\r\n                <form className='transaction_form' onSubmit={handleAddition } >\r\n                    <label>\r\n                        Enter Description <br />\r\n                        <input type=\"text\"\r\n                        value={newDesc} \r\n                        onChange={(event) => setDesc(event.target.value)}  \r\n                        placeholder=\"Detail of transaction\" required />\r\n                    </label>\r\n\r\n                    <br />\r\n                    <label>\r\n                        Enter Amount <br />\r\n                        <input type=\"number\"\r\n                        value={newAmount} \r\n                        onChange={(event) => setAmount(event.target.value)} \r\n                        placeholder=\"Enter Amount in dollars\" required />\r\n                    </label>\r\n                    <br />\r\n                    <input className='btn' type=\"submit\" value=\"Add Transaction\" />\r\n                </form>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Child; ","import React from 'react';\nimport './App.css';\nimport Child from './Child'\nimport {TransactionProvider} from './TransContext'\n\nfunction App() {\n\n \n  return (\n    <TransactionProvider>\n      <Child />\n    </TransactionProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}